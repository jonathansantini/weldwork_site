
<style>
      #configurator-container {
                max-width: 1200px;
                width: 100%;
                height: 675px;
                margin: 0 auto; 
            } 

/* DOOR CONFIG MODAL */

#PageContainer .main-content {
    position: relative;
}

.dc-modal {
    position: absolute;
    z-index: 99999;
    left: -100%;
    top: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,.5);
    opacity: 0;
    transition: 0.25s all ease-in-out;
}

.dc-modal--active {
    opacity: 1;
    left: 0%;
    cursor: pointer;
}

.dc-modal__content form {
    position: relative;
}

.dc-modal__container {
    cursor: default;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    max-width: 500px;
    background: #fff;
    border-radius: 5px;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0,0,0,.5);
    max-height: 80vh;
    overflow-y: scroll;
}

.dc-modal__heading {
    position: relative;
    border-bottom: 1px solid #737373;
}

.dc-modal__close {
    position: absolute;
    cursor: pointer;
    width: 20px;
    height: 20px;
    right: 0;
    top: 0;
}

.dc-modal__image {
    margin: 25px 0;
    background-color: lightgray;
}

.dc-modal__params {
    margin-bottom: 25px;
    border-top: 1px solid #737373;
}

.dc-modal__param {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.dc-modal__param p {
    width: 50%;
    border-bottom: 1px solid #737373;
    padding: 5px;
    padding-top: 0;
    margin: 0;
}

.dc-modal__param p:first-child {
    border-right: 1px solid #737373;
}

.dc-modal__submit {
    text-align: right;
    margin-bottom: 25px;
}

.dc-modal__submit input {
    width: 100%;
    border: 1px solid black;
}

.dc-modal__submit .dc-modal__submit-button {
    cursor: pointer;
    font-style: normal;
    font-weight: 800;
    border: 1px solid black;
    background-color: black;
    color: white;
    border-radius: 50px;
    padding: 5px 10px;
    width: 120px;
    transition: 0.25s all ease-in-out;
}
.dc-modal__submit .dc-modal__submit-button:hover{
    background-color: white;
    color: black;
}

.dc-modal__submit-info {
    margin-bottom: 25px;
}

[form-errors] {
    text-align: left;
    color: red;
    font-style: italic;
    font-size: 14px;
    margin-bottom: 5px;
}

div#configurator-container {
    margin-top: 125px;
    margin-bottom: 125px;
}

/* login cart buttons */

.deskMenuItem {
    z-index: 10;
}
</style> 

<div id='judgeme_all_reviews_page' class="page clearfix jdgm-all-reviews-page">
  <div class="jdgm-all-reviews-page__wrapper">
<div id="configurator-container"></div>
</div> 
</div> 
<script src="https://cdn.shopify.com/s/files/1/0580/5994/8228/files/roomle-configurator-api.es.min.js?v=1646910774" type="module"></script>
<script src="../assets/roomle-configurator-api.es.min.js" type="module"></script>

<!-- DoorConfig Modal -->
<!-- {% form 'contact' %}
    {{ form.errors | default_errors }}
    <div class="first-name">
        <label for="first-name">First name</label>
        <input type="text" name="contact[first_name]" id="first-name" />
    </div>
    <div class="phone">
        <label for="phone">Phone</label>
        <input type="tel" name="contact[phone]" id="phone" />
    </div>
    <div class="email">
        <label for="email">Email</label>
        <input type="email" name="contact[email]" id="email" />
    </div>
    <div class="message">
        <label for="message">Message</label>
        <textarea name="contact[body]" id="message"></textarea>
    </div>
    <div class="submit">
        <input type="submit" value="Create" />
    </div>
{% endform %} -->

<div class="dc-modal" data-modal>
    <div class="dc-modal__container">
        <div class="dc-modal__heading">
            <div class="dc-modal__close" data-modal-close>
                <svg class="dc-modal__close-icon" viewBox="0 0 24 24">
                    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path>
                </svg>
            </div>
            <h3>Send Params</h3>
        </div>

        <div class="dc-modal__content" data-modal-content>
            {% form 'contact' %}
                <div class="dc-modal__image">
                    <img form-image src="" alt="">
                </div>
                <div class="dc-modal__params" form-params></div>

                <div class="message" style="display:none;">
                    <label for="message">Message</label>
                    <textarea name="contact[body]" id="message"></textarea>
                </div>

                <div class="dc-modal__submit">
                    <div class="dc-modal__submit-info" form-info>
                        <input type="text"name="contact[first_name]" placeholder="Full Name*">
                        <input type="email" name="contact[email]" placeholder="Email*">
                        <input type="tel" name="contact[phone]" placeholder="Phone*">
                        <p form-errors></p>
                    </div>
                    <input type="submit" class="dc-modal__submit-button" value="Send">
                </div>
            {% endform %}
        </div>
    </div>
</div>

<script type="module">
    import roomleEmbeddingLib from 'https://cdn.skypack.dev/@roomle/embedding-lib';
    import roomleWebSdk from 'https://cdn.skypack.dev/@roomle/web-sdk';
    // import RoomleConfiguratorApi from './@roomle/RoomleConfiguratorApi';
    import RoomleConfiguratorApi from 'https://cdn.shopify.com/s/files/1/0580/5994/8228/files/roomle-configurator-api.es.min.js?v=1646910774';

    (async ()=> {
        const options = {
            id: 'weldwork_poc:door_system',
        };
        const configurator = await RoomleConfiguratorApi.create(
            'demoConfigurator',
            document.getElementById('configurator-container'),
            options,
        );

        const modal = document.querySelector('[data-modal]');
        const modalContent = modal.querySelector('[data-modal-content]');
        const form = modalContent.querySelector('form');
        const imageElement = form.querySelector('[form-image]');
        const paramsElement = form.querySelector('[form-params]');
        const infoElement = form.querySelector('[form-info]');
        const errorsElement = form.querySelector('[form-errors]');
        const inputs = infoElement.querySelectorAll('input');
        const emailValidation = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        const phoneValidation = /^\(?(\d{3})\)?[- ]?(\d{3})[- ]?(\d{4})$/;

        const createForm = (image, partlist, configuration) => {
            imageElement.src = image.image;
            imageElement.alt = configuration.label;
            
            partlist.fullList[0].parameters.forEach(param => {
                const paraContainer = document.createElement('div');
                paraContainer.classList.add('dc-modal__param');

                const paraLabel = document.createElement('p');
                paraLabel.classList.add('dc-modal__param-label');
                paraLabel.innerText = param.label;
                paraContainer.appendChild(paraLabel);

                const paraValue = document.createElement('p');
                paraValue.classList.add('dc-modal__param-value');
                paraValue.innerText = param.valueLabel;
                paraContainer.appendChild(paraValue);

                const paraInput = document.createElement('input');
                console.log(param.label)
                paraInput.type = 'hidden';
                paraInput.name = `contact[${param.label.toLowerCase().replace(' ', '_')}]`;
                paraInput.value = param.valueLabel;
                paraContainer.appendChild(paraInput);

                paramsElement.appendChild(paraContainer);
            });
        };

        const inputInfoValidator = inputs => {
            const validations = Array.from(inputs).map(input => {
                if(input.value.length > 2)
                    if(input.type === 'text') {
                        return input.value.length > 2;
                    } else if(input.type === 'email') {
                        return emailValidation.test(input.value)
                    } else if(input.type === 'tel') {
                        return phoneValidation.test(input.value)
                    }
                else
                    return false;
            });

            console.log(validations);
            return validations;
        }

        configurator.ui.callbacks.onRequestProduct = (configurationId, image, partlist, price, labels, configuration) => {
            modal.classList.add('dc-modal--active');
            createForm(image, partlist, configuration);
        };

        modal.addEventListener('click', (e) => {
            const target = e.target;
            if (target.closest('[data-modal-close]') || target.classList.contains('dc-modal--active')) {
                paramsElement.innerHTML = '';
                inputs.forEach(input => input.value = '');
                errorsElement.innerHTML = '';
                modal.classList.remove('dc-modal--active');
            }
        });

        form.addEventListener('submit', e => {
            e.preventDefault();
            const validated = inputInfoValidator(inputs);
            errorsElement.innerHTML = '';

            if(validated.every(validation => validation)) {
                const formSplit = $(form).serialize().split('&');
                let formData = ``;
                const message = document.querySelector('#message');
                formSplit.forEach(input => {
                    const [key, value] = input.split('=');
                    // formData[key] = value.normalize();
                    formData += `${key}: ${value} \n`;
                })
                console.log("🚀 ~ file: page.door-config.liquid ~ line 153 ~ formData", formData)

                message.innerText = formData;

                console.log(message, message.innerText)

                form.submit();

            } else {
                validated.forEach((input, i) => {
                    if(!input) {
                        const error = document.createElement('p');
                        if(i === 0) {
                            error.innerText = 'Your name is required and larger than 2 characters';
                            errorsElement.appendChild(error);
                        } else if(i === 1) {
                            error.innerText = 'Your email is required and valid';
                            errorsElement.appendChild(error);
                        } else if(i === 2) {
                            error.innerText = 'Your phone is required and valid (10 digits)';
                            errorsElement.appendChild(error);
                        }
                    }
                })
            }
            
        })
    })();
</script>

<script>
    form.addEventListener('submit', e => {
            e.preventDefault();
            const validated = inputInfoValidator(inputs);
            errorsElement.innerHTML = '';

            if(validated.every(validation => validation)) {
                const formSplit = $(form).serialize().split('&');
                let formData = ``;
                const message = document.querySelector('#message');
                formSplit.forEach(input => {
                    const [key, value] = input.split('=');
                    // formData[key] = value.normalize();
                    formData += `${key}: ${value} \n`;
                })
                console.log("🚀 ~ file: page.door-config.liquid ~ line 153 ~ formData", formData)

                message.innerText = formData;

                console.log(message, message.innerText)

                form.submit();


                                
                // $.ajax({
                //     url: '/contact#contact_form',
                //     type: 'POST',
                //     data: formData,
                //     success: (response) => {
                //         console.log('SUCCESS: ');
                //         console.log(response);
                //         // modal.classList.remove('dc-modal--active');
                //     },
                //     error: (response) => {
                //         console.log('ERROR: ');
                //         console.log(response);
                //         if(response.status === 429) {
                //             var challengeUrl = window.location.origin +'/challenge#contact_form';
                //             window.location = challengeUrl;
                //         }
                //         errorsElement.innerHTML = response.responseJSON.message;
                //     }
                // });
            } else {
                validated.forEach((input, i) => {
                    if(!input) {
                        const error = document.createElement('p');
                        if(i === 0) {
                            error.innerText = 'Your name is required and larger than 2 characters';
                            errorsElement.appendChild(error);
                        } else if(i === 1) {
                            error.innerText = 'Your email is required and valid';
                            errorsElement.appendChild(error);
                        } else if(i === 2) {
                            error.innerText = 'Your phone is required and valid (10 digits)';
                            errorsElement.appendChild(error);
                        }
                    }
                })
            }
            
        })
</script>